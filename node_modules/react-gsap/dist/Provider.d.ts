import React from 'react';
declare type RegisteredPlugins = 'scrollTrigger';
declare type Plugin = (targets: any) => any;
declare type Plugins = {
    [key in RegisteredPlugins]: Plugin;
} | {};
export declare type ContextProps = {
    registerConsumer: (consumer: any) => void;
    plugins?: Plugins;
    getPlugins: (plugins?: Plugins, targets?: any) => any;
};
export declare const Context: React.Context<ContextProps>;
declare abstract class Provider<T, S = {}> extends React.Component<T, S> {
    static contextType: React.Context<ContextProps>;
    consumers: any[];
    plugins?: Plugins;
    constructor(props: T);
    registerConsumer(consumer: any): void;
    getContextValue(plugin?: Plugins): {
        registerConsumer: (consumer: any) => void;
        plugins: Plugins;
        getPlugins: (plugins?: {} | {
            scrollTrigger: Plugin;
        } | undefined, targets?: any) => {};
    };
    getPlugin(props: any, targets: any): {};
    getPlugins(plugins?: Plugins, targets?: any): {};
    renderWithProvider(output: any, plugin?: Plugins): JSX.Element;
}
export default Provider;
